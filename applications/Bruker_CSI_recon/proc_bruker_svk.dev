#!/usr/bin/env python

import sys
import os
import argparse
from collections import OrderedDict
import re
import time
from subprocess import call        
from subprocess import Popen 
from subprocess import check_output
from subprocess import CalledProcessError
from shutil import copyfile, move, rmtree
import glob
import fnmatch


#import stat
#from subprocess import check_call
#from subprocess import call

class BrukerMRSPipe:

   
    ################################################################
    ################################################################
    def __init__(self, input_dir, varian_root, vx, vy, vz, out_root, images_dir, keep, gui, quant_file, verbose):

        self.verbose                    = verbose
        self.input_dir                  = input_dir 
        self.varian_root                = varian_root
        self.keep                       = keep  
        self.fract_vox_shift_x          = vx  
        self.fract_vox_shift_y          = vy  
        self.fract_vox_shift_z          = vz  
        self.output_root                = out_root
        self.images_dir                 = images_dir 
        self.gui                        = gui
        self.spectra_dir                = "./spectra"
        self.maps_dir                   = "./maps"
        self.tmp_dir                    = self.spectra_dir + "/tmp"
        self.quant_file                 = quant_file
        if (self.quant_file == None):
            self.quant_file             = "/netopt/share/bin/local/proc_bruker_svk_quant.xml"
        self.vendor                     = "bruker"
        if (self.varian_root != None):
            self.vendor                     = "varian"
            self.apod                       = "24"
        else: 
            self.vendor                     = "bruker"
            self.apod                       = "10"

        self.__make_dirs()

        vendor_raw_file_dict = self.__get_dynamic_ser_pfile_list()

        self.__convert(vendor_raw_file_dict)

        output_root  = self.__channel2time(vendor_raw_file_dict)

        output_root  = self._apodize(output_root)

        output_root  = self._zero_fill(output_root)

        output_root  = self._recon(output_root)

        #   phasing could involve HLSVD, or just phase on peak of interest
        phased_output_root  = self._phase(output_root)

        met_map_output_root  = self._quantify(phased_output_root)

        noise, baseline  = self._get_noise_and_baseline(phased_output_root)

        gui_cmds = self._make_maps(met_map_output_root, phased_output_root, noise, baseline)

        if ( self.gui == True ): 
            self._load_gui(gui_cmds, verbose)
            self._print_gui_cmds(gui_cmds)
       
        if (self.keep == False): 
            rmtree(self.tmp_dir)    

        print("")
        print("======================================")
        print("DONE")
        print("     spectra are in ./spectra")
        print("     maps are in    ./maps")
        print("======================================")
        print("")
         

    ################################################################
    ################################################################
    def __get_dynamic_ser_pfile_list(self):

        """
        find list of ser files and time point root name in input_dir

        ordered dict of key     values
                        root    ser_path
                        dyn_1   ./dyn_1/ser
                        dyn_2   ./dyn_2/ser
                        ...
                        dyn_9   ./dyn_9/ser
        """

        vendor_raw_file_dict = OrderedDict()
        print ("Find ser files in  sub-dir")

        vendor_raw_file = None
   
        #   defaults for Bruker: 
        raw_name = "ser"
        pattern = re.compile(".*")   #   match anything

        #   defaults for Varian: 
        if (self.vendor == "varian"):
            raw_name = "fid"
            pattern = re.compile(".*" + self.varian_root + "_\d+\.fid/" + raw_name)


        for root, dirs, files in os.walk(self.input_dir):
            for file in files:
                if ( pattern.match(root + "/" +  file) ): 
                    if ( re.search(raw_name, file, re.IGNORECASE) ):
                        vendor_raw_file = ( os.path.join(root, file) )
                        dir_name = os.path.dirname(vendor_raw_file)
                        base_name = os.path.basename(dir_name)
                        base_name = base_name.replace('.fid', '')    
                        vendor_raw_file_dict[base_name] = vendor_raw_file
                        if self.verbose == True:
                            print ("SERFILE: ", vendor_raw_file)
                            break

        return vendor_raw_file_dict
 


    ################################################################
    ################################################################
    def __make_dirs(self):
        """
        make processing dirs
        """

        if not os.path.exists(self.spectra_dir):
            os.makedirs(self.spectra_dir)
        if not os.path.exists(self.maps_dir):
            os.makedirs(self.maps_dir)
        if not os.path.exists(self.tmp_dir):
            os.makedirs(self.tmp_dir)



    ################################################################
    ################################################################
    def __convert(self, vendor_raw_file_dict):
        """
        convert dynamic ser files and write to ddf format
        """
        print("======================================")
        print("convert")
        print("======================================")

        for key in vendor_raw_file_dict:
            out_root = os.path.abspath(self.tmp_dir + "/" + self.output_root + "_" + key) 
            command = [
                'svk_file_convert',
                '-i',  vendor_raw_file_dict[key], 
                '-o',  out_root, 
                '-t2'
            ]
            print("   " + " ".join(command) )

            out = ""
            try:
                out = check_output(command)
            except CalledProcessError as e:
                print("EXCEPTION")
                print(e.output)
        print ("")

        
    ################################################################
    ################################################################
    def __channel2time(self, vendor_raw_file_dict):
        """
        convert ddf channels to dynamic volume 
        """
        print("======================================")
        print("channel2time")
        print("======================================")
        output_root = self.tmp_dir + "/" + self.output_root + "_dynamic_raw" 
        command = [
            'svk_channel2time',
            '-i',  self.tmp_dir + "/" + self.output_root + "_" + vendor_raw_file_dict.keys()[0] + ".ddf", 
            '-o',  output_root, 
            '-t4'
        ]
        print("   " + " ".join(command) + "\n")

        out = ""
        try:
            out = check_output(command)
        except CalledProcessError as e:
            print("EXCEPTION")
            print(e.output)

        return output_root



    ################################################################
    ################################################################
    def _apodize(self, input_root):
        """
        apodize
        returns root name of output file
        """
        print("======================================")
        print("apodize")
        print("======================================")
        output_root = self.tmp_dir + "/" + self.output_root + "_dynamic_raw_apod" 
        command = [
            'svk_apodize',
            '-i',  input_root + ".dcm", 
            '-o',  output_root, 
            '-f', '1', 
            '--width', self.apod 
        ]
        print("   " + " ".join(command) + "\n")

        out = ""
        try:
            out = check_output(command)
        except CalledProcessError as e:
            print("EXCEPTION")
            print(e.output)

        return output_root


    ################################################################
    ################################################################
    def _zero_fill(self, input_root):
        """
        zero fill to next power of 2 
        returns root name of output file
        """
        print("======================================")
        print("zero_fill")
        print("======================================")
        output_root = self.tmp_dir + "/" + self.output_root + "_dynamic_raw_zf" 
        command = [
            'svk_zerofill',
            '-i',  input_root + ".dcm", 
            '-o',  output_root, 
            '--pow2' 
        ]
        print("   " + " ".join(command) + "\n")

        out = ""
        try:
            out = check_output(command)
        except CalledProcessError as e:
            print("EXCEPTION")
            print(e.output)

        return output_root


    ################################################################
    ################################################################
    def _recon(self, input_root):
        """
        recon and voxel shift 
        returns root name of output file
        """
        print("======================================")
        print("recon")
        print("======================================")
        output_root = self.tmp_dir + "/" + self.output_root + "_dynamic_recon" 
        command = [
            'svk_fft',
            '-i',  input_root + ".dcm", 
            '-o',  output_root 
        ]

        if self.fract_vox_shift_x is not None:
            command.extend(
                ['--vsx', self.fract_vox_shift_x]
            )
        if self.fract_vox_shift_y is not None:
            command.extend(
                ['--vsy', self.fract_vox_shift_y]
            )
        if self.fract_vox_shift_z is not None:
            command.extend(
                ['--vsz', self.fract_vox_shift_z]
            )

        print("   " + " ".join(command) + "\n")

        out = ""
        try:
            #logfile = open("svk_fft.log", "w")

            process = Popen(command ) 
            #process = Popen(command, shell=True, stdout=logfile) 

            #progressIndex = 0
            #while process.poll() is None:
            #    self._printProgress(progressIndex, 100, prefix = 'Progress:', barLength = 50)
            #    progressIndex += 1
            #    time.sleep(1)
            process.wait()
            #logfile.flush()
            #out = check_output(command)
        except CalledProcessError as e:
            print("EXCEPTION")
            print(e.output)

        print ("")

        return output_root



    ################################################################
    ################################################################
    def _phase(self, input_root):
        """
        auto phase spectra,  
        currently zero order auto phase on auto detected peaks
        TODO:  implement first order phase correction 
        returns root name of output file
        """
        print("======================================")
        print("phase")
        print("======================================")
        output_root = self.tmp_dir + "/" + self.output_root + "_phased" 
        command = [
            'svk_auto_phase',
            '-i',  input_root + ".dcm", 
            '-o',  output_root, 
            '-a', '2' 
        ]
        print("   " + " ".join(command) + "\n")

        out = ""
        try:
            logfile = open("svk_auto_phase.log", "w")
            process = Popen(command, stdout=logfile, stderr=logfile) 
            process.wait()
            logfile.flush()
            logfile.close() 
        except CalledProcessError as e:
            print("EXCEPTION")
            print(e.output)

        #   move phased file into spectra dir for quantification: 
        output_base_name = os.path.basename(output_root )
        new_output_root = self.spectra_dir + "/" + output_base_name
        
        move(output_root+ ".dcm", new_output_root+ ".dcm")

        return new_output_root


    ################################################################
    ################################################################
    def _quantify(self, input_root):
        """
        generate met maps for pyruvate and lactate 
        TODO:  Fix frequency ranges for pyr and lactate 
        returns root name of output file
        """

        print("======================================")
        print("quantify")
        print("======================================")
        input_base_name = os.path.basename( input_root )
        new_input_root = self.maps_dir + "/" + input_base_name + "_"

        output_root = new_input_root.replace(".dcm", "")
        command = [
            'svk_quantify',
            '-i',  input_root + ".dcm", 
            '-o',  output_root, 
            '--xml', self.quant_file,  
            '-t', '6'
        ]
        print("   " + " ".join(command) + "\n")

        out = ""
        try:
            #out = check_output(command)
            logfile = open("svk_quantify.log", "w")
            process = Popen(command, stdout=logfile) 
            process.wait()
            logfile.flush()
            logfile.close() 
        except CalledProcessError as e:
            print("EXCEPTION")
            print(e.output)

        return output_root



    ################################################################
    ################################################################
    def _get_noise_and_baseline(self, input_root):
        """
        gets the noise value from the phased spectra 
        TODO:  modify to use user defined range rather than auto detected range
        returns the noise value 
        """

        print("======================================")
        print("get_noise")
        print("======================================")

        noise    = 0
        baseline = 0

        command = [
            'svk_noise',
            '-i',  input_root + ".dcm" 
        ]
        print("   " + " ".join(command) + "\n")

        out = ""
        try:
            #out = check_output(command)
            logfile = open("svk_noise.log", "w")
            process = Popen(command, stdout=logfile, stderr=logfile) 
            process.wait()
            logfile.flush()
            logfile.close() 
            #   NOISE SD: 45.3095
            #   Mean Baseline: 9.68581

            logfile = open("svk_noise.log", "r")
            for line in logfile:
            #for line in iter(out.splitlines()):
                regOutNoise = re.search( r'NOISE SD: (.*)$', line.decode('latin_1'))
                if regOutNoise:
                    if regOutNoise.group(1):
                        noise = float(regOutNoise.group(1))
                regOutBaseline = re.search( r'Mean Baseline: (.*)$', line.decode('latin_1'))
                if regOutBaseline:
                    if regOutBaseline.group(1):
                        baseline= float(regOutBaseline.group(1))
            logfile.close()

        except CalledProcessError as e:
            print("EXCEPTION")
            print(e.output)

        if self.verbose == True:
            print("NOISE:    ", noise)
            print("BASELINE: ", baseline)

        return [noise , baseline]



    ################################################################
    ################################################################
    def _make_maps(self, input_root, phased_output_root, noise, baseline):
        """
        computes the SNR and AUC maps. 
        TODO:  use real valued maps, for now using mag value because of first order phase issue. 
        """

        print("======================================")
        print("make_maps")
        print("======================================")

        gui_cmds_dyn  = "sivic "
        gui_cmds_spec = "sivic "
        gui_cmds_spec += " --is " + phased_output_root + ".dcm "

        logfile = open("svk_make_maps.log", "w")
        try:

            #       create an image template of the right size
            #       create a 1 valued image, starting with a zero valued template of the correct size
            #       - 1. create a tempalate of the right size
            #       - 2. set all the values to zero
            #       - 3. add 1 to all values to create image with all 1's

            output_root_template = input_root + "_template"
            command = [
                'svk_file_convert',
                '-i', input_root + "PYRUVATE_MAG_PEAK_HT.dcm", 
                '-o', output_root_template, 
                '-t', '5'
            ]
            print("   " + " ".join(command) + "\n")

            #out = check_output(command)
            process = Popen(command, stdout=logfile) 
            process.wait()
            logfile.flush()

            #   zeros
            output_root_zero = input_root + "_zero"
            command = [
                'svk_image_mathematics',
                '--i1', output_root_template + "I1.dcm", 
                '-o', output_root_zero, 
                '-p', '5', 
                '-s', '0',  
                '--single'
            ]
            print("   " + " ".join(command) + "\n")

            out = check_output(command)
            
            template_files = glob.glob(output_root_template + "*")
            for template_file  in template_files:
                os.remove( template_file )

            #   ones 
            output_root_one  = input_root + "_one"
            command = [
                'svk_image_mathematics',
                '--i1',  output_root_zero + "I1.dcm", 
                '-o', output_root_one, 
                '-p', '6', 
                '-s', '1', 
                '--single'
            ]
            print("   " + " ".join(command) + "\n")
            out = check_output(command)

            #   create an image with the mean baseline value for dc offset correction
            output_root_baseline = input_root + "_baseline"
            command = [
                'svk_image_mathematics',
                '--i1',  output_root_one + "I1.dcm", 
                '-o', output_root_baseline, 
                '-p', '5', 
                '-s', str(baseline), 
                '--single'
            ]
            print("   " + " ".join(command) + "\n")
            out = check_output(command)


            #   create an image with the noise SNR calc 
            output_root_noise = input_root + "_noise"
            command = [
                'svk_image_mathematics',
                '--i1',  output_root_one + "I1.dcm", 
                '-o', output_root_noise, 
                '-p', '5', 
                '-s', str(noise), 
                '--single'
            ]
            print("   " + " ".join(command) + "\n")
            out = check_output(command)


            #   Subtract the baseline: 
            #   svk_image_mathematics.dev --i1 ../dynamics_lactate/Image_000.dcm  
            #           --i2 baselineI1.dcm -o lac_nobaseline -p2 --output_type 2
            #   svk_image_mathematics.dev --i1 ../dynamics_pyruvate/Image_000.dcm 
            #           --i2 baselineI1.dcm -o pyr_nobaseline -p2 --output_type 2
            map_set = ["PYRUVATE_MAG_PEAK_HT", "LACTATE_MAG_PEAK_HT", "UREA_MAG_PEAK_HT"]
            for map_name in map_set:
                output_root_nobaseline = input_root + map_name + "_nobaseline"
                command = [
                    'svk_image_mathematics',
                    '--i1',  input_root + map_name + ".dcm", 
                    '--i2',  output_root_baseline + "I1.dcm", 
                    '-o', output_root_nobaseline, 
                    '-p', '2', 
                    '--output_type', str(2), 
                    '--single'
                ]
                print("   " + " ".join(command))
                out = check_output(command)

            print ("")
            for map_name in map_set:
                output_root_snr = input_root + map_name + "_snr"
                command = [
                    'svk_image_mathematics',
                    '--i1',  input_root + map_name + ".dcm", 
                    '--i2',  output_root_noise + "I1.dcm", 
                    '-o', output_root_snr, 
                    '-p', '4', 
                    '--output_type', str(2), 
                    '--single'
                ]
                print("   " + " ".join(command))
                out = check_output(command)

                #   make single time point images for AUC integration
                command = [
                    'svk_file_convert',
                    '-i',  output_root_snr + ".dcm", 
                    '-o',  output_root_snr + '_tmp',
                    '-t', '5'
                ]
                print("   " + " ".join(command))
                out = check_output(command)
            print ("")

            #   AUC: 
            #   iterate over the snr maps to create AUC
            #   ZERO:   '--i1',  output_root_zero + ".idf", 
            
            for map_name in map_set:
                output_root_snr = input_root + map_name + "_snr"
                auc_root        = input_root + map_name + "_snr_auc"
                auc_root_tmp    = input_root + map_name + "_snr_auc_tmp"
                copyfile( output_root_zero + "I1.dcm", auc_root + ".dcm")

                #foreach time point in out_root_snr_tmp + I*
                #   glob files to add 
                time_series = glob.glob(output_root_snr + "_tmpI*.dcm")
                for vol in time_series:
                    command = [
                        'svk_image_mathematics', 
                        '--i1',  vol,   
                        '--i2',  auc_root + ".dcm",  
                        '-o',  auc_root_tmp, 
                        '-p',  '1', 
                        '--single'
                    ]
                    print("   " + " ".join(command))
                    out = check_output(command)
                    move(auc_root_tmp + "I1.dcm", auc_root + ".dcm")

                gui_cmds_dyn  += "--id " + output_root_snr  + ".dcm " +  "-i " + auc_root + ".dcm "
                gui_cmds_spec += "-i  "  + output_root_snr  + ".dcm " +  "-i " + auc_root + ".dcm "
                    

            tmp_files = glob.glob(input_root + "*tmp*")
            for tmp_file  in tmp_files:
                os.remove( tmp_file )

            #   add anatomical images
            if (self.images_dir is not None):
                anatomical_image = None
                for root, dirs, files in os.walk(self.images_dir):
                    for file_name in fnmatch.filter(files, '*.dcm'):
                        anatomical_image = os.path.join(root, file_name)
                        if self.verbose == True:
                            print ("SERFILE: ", anatomical_image)
                        break

            #gui_cmds_dyn  += "-i " + anatomical_image + " " 
            #gui_cmds_spec += "-i " + anatomical_image + " " 



        except CalledProcessError as e:
            print("EXCEPTION")
            print(e.output)

        logfile.close() 

        gui_cmds = [gui_cmds_spec, gui_cmds_dyn]
        self._print_gui_cmds(gui_cmds)

        return gui_cmds 


    ################################################################
    ################################################################
    def _print_gui_cmds(self, gui_cmds):

        print ""
        print("======================================")
        print("Run the following commands to load the")
        print("results into the SIVIC GUI")
        print("======================================")
        for cmd in gui_cmds: 
            print cmd
            print ""


#           9.  Mask them to get rid of noise in ratio image
#               svk_image_threshold -i lac_auc.idf -o lac_auc_mask -t3 -v 1 --single -l 10
#               svk_image_threshold -i pyr_auc.idf -o pyr_auc_mask -t3 -v 1 --single -l 10
#           
#               svk_image_mathematics --i1 lac_auc.idf --i2 lac_auc_mask.idf  -p3 --single -o lac_auc_masked
#               svk_image_mathematics --i1 pyr_auc.idf --i2 pyr_auc_mask.idf  -p3 --single -o pyr_auc_masked
#           
#           
#           10. compute the lac/pyr snr map from these two AUCs
#               svk_image_mathematics --i1 lac_auc_masked.idf  --i2 pyr_auc_masked.idf  -o lac_pyr_snr -p 4 --single



    ################################################################
    ################################################################
    def _load_gui(self, gui_cmds, verbose):
        process0 = Popen(gui_cmds[0].split())
        process1 = Popen(gui_cmds[1].split())
        process0.wait()
        process1.wait()



    ################################################################
    ################################################################
    def _printProgress (self, iteration, total, prefix = '', suffix = '', decimals = 1, barLength = 100):
        """
        Call in a loop to create terminal progress bar
        @params:
            iteration   - Required  : current iteration (Int)
            total       - Required  : total iterations (Int)
            prefix      - Optional  : prefix string (Str)
            suffix      - Optional  : suffix string (Str)
            decimals    - Optional  : positive number of decimals in percent complete (Int)
            barLength   - Optional  : character length of bar (Int)
        """
        import sys

        formatStr       = "{0:." + str(decimals) + "f}"
        percents        = formatStr.format(100 * (iteration / float(total)))
        filledLength    = int(round(barLength * iteration / float(total)))
        #   \u2588 is a solid cursor
        #   \033 sets color, 1;36m is cyan, 0;32m is green
        bar             = u"\u2588" * filledLength + '-' * (barLength - filledLength)
        sys.stdout.write('\r\033[0;32m %s |%s| %s \033[0m' % (prefix, bar, percents )),

        if iteration == total:
            sys.stdout.write('\n')
        sys.stdout.flush()




if __name__ == '__main__':

    """
    #   Bruker MRS pipeine
    #   Examples:
    #   1.  Varian data example where the fid files of interest are nested in other fid dirs:
    #       ls ./c13_csi2d_nlr7_urea_*.fid/csi*.fid
    #           c13_csi2d_nlr7_urea_01.fid/csi2d_01.fid:
    #               fid  log  procpar  text
    #           c13_csi2d_nlr7_urea_02.fid/csi2d_02.fid:
    #               fid  log  procpar  text
    #           c13_csi2d_nlr7_urea_03.fid/csi2d_03.fid:
    #               fid  log  procpar  text
    #           ...
    #    
    #       process csi2d_\d+.fid files, one for each time point
    #       proc_bruker_svk -i ./ --varian_root csi2d -o csi2d
    """
    #
    usage = """proc_bruker_svk"""
    help_string =  "MRS proocessing pipeline for dynamic Bruker data. \n"
    help_string += "\n"
    help_string += "Reconstruct and process dynamic Bruker ser files. Generates SNR and AUC maps from magnitude \n"
    help_string += "spectra because or current inability to apply first order phase correction.\n"
    help_string += "    --input dir should be a parent dir (any number of levels above) of the dir containing the ser files.\n" 
    help_string += "\n"
    help_string += "    Example: proc_bruker_svk -i ./ -o my_dynamic_data\n"
    help_string += "\n"

    parser = argparse.ArgumentParser(description=help_string, formatter_class=argparse.RawTextHelpFormatter) 
    parser.add_argument("-i", "--input_dir",     help = "input spec dir with dynamic sub-dirs",                 required=True)
    parser.add_argument("--varian_root",         help = "root of varian fid dirs",                              default=None,   required=False)
    parser.add_argument(      "--vx",            help = "fractional voxel shift x",                             default=None,   required=False)
    parser.add_argument(      "--vy",            help = "fractional voxel shift y",                             default=None,   required=False)
    parser.add_argument(      "--vz",            help = "fractional voxel shift z",                             default=None,   required=False)
    #parser.add_argument(     "--images_dir",    help = "dir with anatomical images",                           default=None,   required=False)
    parser.add_argument("-o", "--out_root",      help = "output file with labels and series info",                              required=True)
    parser.add_argument("-g", "--gui",           help = "load results in GUI", action='store_true',             default=False,  required=False)
    parser.add_argument("-v", "--verbose",       help = "verbose output", action='store_true',                  default=False,  required=False)
    parser.add_argument("-q", "--quant_file",    help = "specity a custom quant file",                          default=None,   required=False)
    #parser.add_argument("-h","--help",           help = "print help", action='store_true',                      default=False,  required=False)
    parser.add_argument("-k", "--keep",          help = "retain intermediate files", action='store_true',       default=False,  required=False)
    args = parser.parse_args()

    #TODO 
    #   add flag to set apod bandwidth
    #   write up instructions for masking the phased data and snr dynamic maps

    images_dir = None    

    cwd = os.getcwd()

    #   Log the start
    Logfile_string = ' '.join(sys.argv)
    try:
        call(["log_processing", "-l", cwd, "-s", Logfile_string])
    except CalledProcessError as e:
        print e
        exit(1)


    BrukerMRSPipe(args.input_dir, args.varian_root, args.vx, args.vy, args.vz, args.out_root, images_dir, args.keep, args.gui, args.quant_file, args.verbose)


    #   Log the end 
    Logfile_string = ' '.join(sys.argv)
    try:
        call(["log_processing", "-l", cwd, "-e", Logfile_string])
    except CalledProcessError as e:
        print e
        exit(1)


