#!/bin/csh
#
# splitcsisp ls
- script to split dynamic 2dcsi data with spiral encode
#

# Details - dynamic bruker 2dcsi fid file is separated into individual fid files
#           for sivic processing using split_csi.c routine
#	  modified from splitcsi; uses csi_linearize instead of order_csi
#         input:  fid => dyn_fid_#/ser 
#         Default size 128x8x8; DigNp=128
#         Note: if the data size is greater than 128 you must set the rsize parame
#               set rsize = 256
#         Note: if the data size is 64, do not change rsize; minimum bruker trace size is 128         
# Note: Coronal not tested
#          

# Instructions - NR images acquired; type 
#           ./splitcsisp NR
#
# Example:  splitcsisp 10          /axial(default) do L-R flip; Note NR=10
#
# Version: 20171207
#
# 20171030: bug fix for read size = 64
# 20180418: fid numbers _# => _0#
# 20230430: added set rootdir = `dirname $0` -- set split_csi, csi_linearize as same folder as splitcsisp
####################################################################################################

#define dimensions
set rsize = 128   #spectrum size complex
set psize = 8     #pe1
set ssize = 8     #pe2

#set psize = 16    #pe1
#set ssize = 16    #pe2

set orient = "axial"
if($#argv == 0) then
  echo "Usage: splitcsisp number of 2dcsi_time_points"
  exit(1) 
else if($#argv == 1) then
    @ nr  = $argv[1]
else if($#argv == 2) then
    @ nr  = $argv[1]
    set orient  = $argv[2]
    endif
else
  echo "Usage: splitcsisp number of 2dcsi_time_points"
  exit(1) 
endif
echo "splitcsisp: fid file split into $nr datasets => dyn_fid_#"

set rootdir = `dirname $0` #get current relative location of script
set split_csi = "$rootdir/split_csi"    #split dynamic fid => ser
set csi_linearize = "$rootdir/csi_linearize"    #swap L-R
#set svk_file_convert = "/home/jasonc/drop/bruker/svk_file_convert" 
#set svk_file_convert = "svk_file_convert.dev" 
#check files
if !(-f "method") then
  echo "Illegal directory, method file not found"
  exit(1)
endif
# split images and put in dyn_fid_#/ser and idf files  
if(-f "fid") then
  if (-f "method") then
    rm -rf tmp2
    cp method tmp2
    if($rsize == 128) then  #minimum bruker fid size is 128 complex pts
      perl -pi -e 's/DigNp=64/DigNp=128/' tmp2    
    endif
  else
    echo "splitcsisp: method file not found"
    exit(1)
  endif
  if (-f "acqp") then
    rm -rf tmp
    cp acqp tmp 
    perl -pi -e 's/NR='"$nr"'/NR=1/' tmp    #NR=1 for sivic processing
  else
    echo "splitcsisp: acqp file not found"
    exit(1)
  endif
  cp ../subject .   #svk_ needs this to read dyn_fid_1/ser file
  @ n = 1
  while($n <=  $nr) 
   if($n <= 9) then 
    set d_fid = "dyn_fid_0"
   else
    set d_fid = "dyn_fid_"
   endif
    rm -rf dyn_fid_$n  #old filename format
    rm -rf $d_fid$n
    mkdir $d_fid$n

    rm -rf sfid 
    $split_csi -n $n -r $rsize -p $psize -s $ssize -i fid -o sfid 
    cp tmp $d_fid$n/acqp
    cp tmp2 $d_fid$n/method
    mv sfid $d_fid$n/sfid
    if($orient == "axial") then 
      #L-R flip for axial
      $csi_linearize -n 1 -r $rsize -p $psize -s $ssize -i $d_fid$n/sfid -o $d_fid$n/ser 
    else
      mv  $d_fid$n/sfid $d_fid$n/ser
    endif
echo $n
#    $svk_file_convert -i dyn_fid_$n/ser -o dyn_fid_$n/out -t2
    @ n++
  end
  rm -rf tmp
else
  echo "splitcsisp: fid file not found"    
  exit(1)
endif
echo "Spiral-encoded 2dcsi data for $orient image"

